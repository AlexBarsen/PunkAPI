"use strict";

var model = _interopRequireWildcard(require("./model.js"));

var _beerView = _interopRequireDefault(require("./views/beerView.js"));

var _searchView = _interopRequireDefault(require("./views/searchView.js"));

var _resultsView = _interopRequireDefault(require("./views/resultsView.js"));

var _infoView = _interopRequireDefault(require("./views/infoView.js"));

var _bookmarksView = _interopRequireDefault(require("./views/bookmarksView.js"));

var _paginationView = _interopRequireDefault(require("./views/paginationView.js"));

var helpers = _interopRequireWildcard(require("./helpers.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const controlRandomBeer = async function () {
  try {
    // 1) Loading Beer
    await model.loadRandomBeer();
    helpers.splitIngredients(model.state.beer.ingredients, model.state.beer.ingredient); // 2) Rendering Beer

    _beerView.default.render(model.state.beer);

    _infoView.default.render(model.state.beer);

    helpers.calculateBeerSize();
  } catch (err) {
    alert(err);
  }
};

const controlSearchBeers = async function () {
  try {
    // 1)Get search query
    const query = _searchView.default.getQuery();

    if (!query) return; // 2) Load search results

    await model.loadSearchResults(query); // 3) Render Search Beer

    _resultsView.default.render(model.getSearchResultsPage(1)); // 4) Render Pagination Buttons


    _paginationView.default.render(model.state.search);
  } catch (err) {
    alert(err);
  }
};

const controlSelectedBeer = async function (selected) {
  try {
    await model.loadSelectedBeer(selected);
    helpers.splitIngredients(model.state.beer.ingredients, model.state.beer.ingredient);

    _beerView.default.render(model.state.beer);

    _infoView.default.render(model.state.beer);

    helpers.calculateBeerSize();
  } catch (err) {
    alert(err);
  }
};

const controlPagination = function (goToPage) {
  _resultsView.default.render(model.getSearchResultsPage(goToPage));

  _paginationView.default.render(model.state.search);
};

const controlAddBookmark = function () {
  if (!model.state.beer.bookmarked) model.addBookmark(model.state.beer);else model.deleteBookmark(model.state.beer.id);

  _bookmarksView.default.render(model.state.bookmarks);

  helpers.bookmarkType();
};

const controlBookmarks = function () {
  _bookmarksView.default.render(model.state.bookmarks);
};

const resetApp = function () {
  helpers.resetLocalStorage(model.state.bookmarks);

  _resultsView.default.reset();

  _paginationView.default.reset();

  _beerView.default.reset();

  _infoView.default.reset();

  _bookmarksView.default.reset();
};

const init = function () {
  _bookmarksView.default.addHandlerRender(controlBookmarks);

  _searchView.default.addHandlerSearch(controlSearchBeers);

  _beerView.default.addHandlerRandom(controlRandomBeer);

  _paginationView.default.addHandlerClick(controlPagination);

  _searchView.default.addHandlerSelected(controlSelectedBeer);

  _beerView.default.addHandlerBookmark(controlAddBookmark);

  _bookmarksView.default.addHandlerSelectedBookmark(controlSelectedBeer);

  _searchView.default.addHandlerReset(resetApp);
};

init();